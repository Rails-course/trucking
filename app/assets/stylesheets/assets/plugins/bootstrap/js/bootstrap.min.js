/*!
  * Bootstrap v4.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!(function (t, e) { typeof exports === 'object' && typeof module !== 'undefined' ? e(exports, require('../../.rbenv/versions/2.6.8/lib/ruby/gems/2.6.0/gems/jquery-rails-4.5.0/vendor/assets/javascripts/jquery'), require('../../../../../../../../../.rbenv/versions/2.6.8/lib/ruby/gems/2.6.0/gems/popper_js-1.16.0/assets/javascripts/popper')) : typeof define === 'function' && define.amd ? define(['exports', '../../.rbenv/versions/2.6.8/lib/ruby/gems/2.6.0/gems/jquery-rails-4.5.0/vendor/assets/javascripts/jquery', '../../../../../../../../../.rbenv/versions/2.6.8/lib/ruby/gems/2.6.0/gems/popper_js-1.16.0/assets/javascripts/popper'], e) : e(t.bootstrap = {}, t.jQuery, t.Popper); }(this, (t, e, c) => {
  function i(t, e) { for (let n = 0; n < e.length; n++) { const i = e[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, 'value' in i && (i.writable = !0), Object.defineProperty(t, i.key, i); } } function o(t, e, n) { return e && i(t.prototype, e), n && i(t, n), t; } function h(r) {
    for (let t = 1; t < arguments.length; t++) {
      var s = arguments[t] != null ? arguments[t] : {}; let e = Object.keys(s); typeof Object.getOwnPropertySymbols === 'function' && (e = e.concat(Object.getOwnPropertySymbols(s).filter((t) => Object.getOwnPropertyDescriptor(s, t).enumerable))), e.forEach((t) => {
        let e; let n; let i; e = r, i = s[n = t], n in e ? Object.defineProperty(e, n, {
          value: i, enumerable: !0, configurable: !0, writable: !0,
        }) : e[n] = i;
      });
    } return r;
  }e = e && e.hasOwnProperty('default') ? e.default : e, c = c && c.hasOwnProperty('default') ? c.default : c; let r; let n; let s; let a; let l; let u; let f; let d; let _; let g; let m; let p; let v; let E; let y; let T; let C; let I; let A; let D; let b; let S; let w; let N; let O; let k; let P; let L; let j; let R; let H; let W; let M; let x; let U; let K; let F; let V; let Q; let B; let Y; let G; let q; let z; let X; let J; let Z; let $; let tt; let et; let nt; let it; let rt; let st; let ot; let at; let lt; let ht; let ct; let ut; let ft; let dt; let _t; let gt; let mt; let pt; let vt; let Et; let yt; let Tt; let Ct; let It; let At; let Dt; let bt; let St; let wt; let Nt; let Ot; let kt; let Pt; let Lt; let jt; let Rt; let Ht; let Wt; let Mt; let xt; let Ut; let Kt; let Ft; let Vt; let Qt; let Bt; let Yt; let Gt; let qt; let zt; let Xt; let Jt; let Zt; let $t; let te; let ee; let ne; let ie; let re; let se; let oe; let ae; let le; let he; let ce; let ue; let fe; let de; let _e; let ge; let me; let pe; let ve; let Ee; let ye; let Te; let Ce; let Ie; let Ae; let De; let be; let Se; let we; let Ne; let Oe; let ke; let Pe; let Le; let je; let Re; let He; let We; let Me; let xe; let Ue; let Ke; let Fe; let Ve; let Qe; let Be; let Ye; let Ge; let qe; let ze; let Xe; let Je; let Ze; let $e; let tn; let en; let nn; let rn; let sn; let on; let an; let ln; let hn; let cn; let un; let fn; let dn; let _n; let gn; let mn; let pn; let vn; let En; let yn; let Tn; const Cn = (function (i) {
    const e = 'transitionend'; function t(t) { const e = this; let n = !1; return i(this).one(l.TRANSITION_END, () => { n = !0; }), setTimeout(() => { n || l.triggerTransitionEnd(e); }, t), this; } var l = {
      TRANSITION_END: 'bsTransitionEnd', getUID(t) { for (;t += ~~(1e6 * Math.random()), document.getElementById(t););return t; }, getSelectorFromElement(t) { let e = t.getAttribute('data-target'); e && e !== '#' || (e = t.getAttribute('href') || ''); try { return i(document).find(e).length > 0 ? e : null; } catch (t) { return null; } }, getTransitionDurationFromElement(t) { if (!t) return 0; let e = i(t).css('transition-duration'); return parseFloat(e) ? (e = e.split(',')[0], 1e3 * parseFloat(e)) : 0; }, reflow(t) { return t.offsetHeight; }, triggerTransitionEnd(t) { i(t).trigger(e); }, supportsTransitionEnd() { return Boolean(e); }, isElement(t) { return (t[0] || t).nodeType; }, typeCheckConfig(t, e, n) { for (const i in n) if (Object.prototype.hasOwnProperty.call(n, i)) { const r = n[i]; const s = e[i]; const o = s && l.isElement(s) ? 'element' : (a = s, {}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase()); if (!new RegExp(r).test(o)) throw new Error(`${t.toUpperCase()}: Option "${i}" provided type "${o}" but expected type "${r}".`); } let a; },
    }; return i.fn.emulateTransitionEnd = t, i.event.special[l.TRANSITION_END] = { bindType: e, delegateType: e, handle(t) { if (i(t.target).is(this)) return t.handleObj.handler.apply(this, arguments); } }, l;
  }(e)); const In = (n = 'alert', a = `.${s = 'bs.alert'}`, l = (r = e).fn[n], u = { CLOSE: `close${a}`, CLOSED: `closed${a}`, CLICK_DATA_API: `click${a}.data-api` }, f = 'alert', d = 'fade', _ = 'show', g = (function () { function i(t) { this._element = t; } const t = i.prototype; return t.close = function (t) { let e = this._element; t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e); }, t.dispose = function () { r.removeData(this._element, s), this._element = null; }, t._getRootElement = function (t) { const e = Cn.getSelectorFromElement(t); let n = !1; return e && (n = r(e)[0]), n || (n = r(t).closest(`.${f}`)[0]), n; }, t._triggerCloseEvent = function (t) { const e = r.Event(u.CLOSE); return r(t).trigger(e), e; }, t._removeElement = function (e) { const n = this; if (r(e).removeClass(_), r(e).hasClass(d)) { const t = Cn.getTransitionDurationFromElement(e); r(e).one(Cn.TRANSITION_END, (t) => n._destroyElement(e, t)).emulateTransitionEnd(t); } else this._destroyElement(e); }, t._destroyElement = function (t) { r(t).detach().trigger(u.CLOSED).remove(); }, i._jQueryInterface = function (n) { return this.each(function () { const t = r(this); let e = t.data(s); e || (e = new i(this), t.data(s, e)), n === 'close' && e[n](this); }); }, i._handleDismiss = function (e) { return function (t) { t && t.preventDefault(), e.close(this); }; }, o(i, null, [{ key: 'VERSION', get() { return '4.1.1'; } }]), i; }()), r(document).on(u.CLICK_DATA_API, '[data-dismiss="alert"]', g._handleDismiss(new g())), r.fn[n] = g._jQueryInterface, r.fn[n].Constructor = g, r.fn[n].noConflict = function () { return r.fn[n] = l, g._jQueryInterface; }, g); const An = (p = 'button', E = `.${v = 'bs.button'}`, y = '.data-api', T = (m = e).fn[p], C = 'active', I = 'btn', D = '[data-toggle^="button"]', b = '[data-toggle="buttons"]', S = 'input', w = '.active', N = '.btn', O = { CLICK_DATA_API: `click${E}${y}`, FOCUS_BLUR_DATA_API: `${(A = 'focus') + E + y} blur${E}${y}` }, k = (function () { function n(t) { this._element = t; } const t = n.prototype; return t.toggle = function () { let t = !0; let e = !0; const n = m(this._element).closest(b)[0]; if (n) { const i = m(this._element).find(S)[0]; if (i) { if (i.type === 'radio') if (i.checked && m(this._element).hasClass(C))t = !1; else { const r = m(n).find(w)[0]; r && m(r).removeClass(C); } if (t) { if (i.hasAttribute('disabled') || n.hasAttribute('disabled') || i.classList.contains('disabled') || n.classList.contains('disabled')) return; i.checked = !m(this._element).hasClass(C), m(i).trigger('change'); }i.focus(), e = !1; } }e && this._element.setAttribute('aria-pressed', !m(this._element).hasClass(C)), t && m(this._element).toggleClass(C); }, t.dispose = function () { m.removeData(this._element, v), this._element = null; }, n._jQueryInterface = function (e) { return this.each(function () { let t = m(this).data(v); t || (t = new n(this), m(this).data(v, t)), e === 'toggle' && t[e](); }); }, o(n, null, [{ key: 'VERSION', get() { return '4.1.1'; } }]), n; }()), m(document).on(O.CLICK_DATA_API, D, (t) => { t.preventDefault(); let e = t.target; m(e).hasClass(I) || (e = m(e).closest(N)), k._jQueryInterface.call(m(e), 'toggle'); }).on(O.FOCUS_BLUR_DATA_API, D, (t) => { const e = m(t.target).closest(N)[0]; m(e).toggleClass(A, /^focus(in)?$/.test(t.type)); }), m.fn[p] = k._jQueryInterface, m.fn[p].Constructor = k, m.fn[p].noConflict = function () { return m.fn[p] = T, k._jQueryInterface; }, k); const Dn = (L = 'carousel', R = `.${j = 'bs.carousel'}`, H = '.data-api', W = (P = e).fn[L], M = {
    interval: 5e3, keyboard: !0, slide: !1, pause: 'hover', wrap: !0,
  }, x = {
    interval: '(number|boolean)', keyboard: 'boolean', slide: '(boolean|string)', pause: '(string|boolean)', wrap: 'boolean',
  }, U = 'next', K = 'prev', F = 'left', V = 'right', Q = {
    SLIDE: `slide${R}`, SLID: `slid${R}`, KEYDOWN: `keydown${R}`, MOUSEENTER: `mouseenter${R}`, MOUSELEAVE: `mouseleave${R}`, TOUCHEND: `touchend${R}`, LOAD_DATA_API: `load${R}${H}`, CLICK_DATA_API: `click${R}${H}`,
  }, B = 'carousel', Y = 'active', G = 'slide', q = 'carousel-item-right', z = 'carousel-item-left', X = 'carousel-item-next', J = 'carousel-item-prev', Z = {
    ACTIVE: '.active', ACTIVE_ITEM: '.active.carousel-item', ITEM: '.carousel-item', NEXT_PREV: '.carousel-item-next, .carousel-item-prev', INDICATORS: '.carousel-indicators', DATA_SLIDE: '[data-slide], [data-slide-to]', DATA_RIDE: '[data-ride="carousel"]',
  }, $ = (function () {
    function s(t, e) { this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(e), this._element = P(t)[0], this._indicatorsElement = P(this._element).find(Z.INDICATORS)[0], this._addEventListeners(); } const t = s.prototype; return t.next = function () { this._isSliding || this._slide(U); }, t.nextWhenVisible = function () { !document.hidden && P(this._element).is(':visible') && P(this._element).css('visibility') !== 'hidden' && this.next(); }, t.prev = function () { this._isSliding || this._slide(K); }, t.pause = function (t) { t || (this._isPaused = !0), P(this._element).find(Z.NEXT_PREV)[0] && (Cn.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null; }, t.cycle = function (t) { t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval)); }, t.to = function (t) { const e = this; this._activeElement = P(this._element).find(Z.ACTIVE_ITEM)[0]; const n = this._getItemIndex(this._activeElement); if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding)P(this._element).one(Q.SLID, () => e.to(t)); else { if (n === t) return this.pause(), void this.cycle(); const i = n < t ? U : K; this._slide(i, this._items[t]); } }, t.dispose = function () { P(this._element).off(R), P.removeData(this._element, j), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null; }, t._getConfig = function (t) { return t = h({}, M, t), Cn.typeCheckConfig(L, t, x), t; }, t._addEventListeners = function () { const e = this; this._config.keyboard && P(this._element).on(Q.KEYDOWN, (t) => e._keydown(t)), this._config.pause === 'hover' && (P(this._element).on(Q.MOUSEENTER, (t) => e.pause(t)).on(Q.MOUSELEAVE, (t) => e.cycle(t)), 'ontouchstart' in document.documentElement && P(this._element).on(Q.TOUCHEND, () => { e.pause(), e.touchTimeout && clearTimeout(e.touchTimeout), e.touchTimeout = setTimeout((t) => e.cycle(t), 500 + e._config.interval); })); }, t._keydown = function (t) { if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) { case 37: t.preventDefault(), this.prev(); break; case 39: t.preventDefault(), this.next(); } }, t._getItemIndex = function (t) { return this._items = P.makeArray(P(t).parent().find(Z.ITEM)), this._items.indexOf(t); }, t._getItemByDirection = function (t, e) { const n = t === U; const i = t === K; const r = this._getItemIndex(e); const s = this._items.length - 1; if ((i && r === 0 || n && r === s) && !this._config.wrap) return e; const o = (r + (t === K ? -1 : 1)) % this._items.length; return o === -1 ? this._items[this._items.length - 1] : this._items[o]; }, t._triggerSlideEvent = function (t, e) {
      const n = this._getItemIndex(t); const i = this._getItemIndex(P(this._element).find(Z.ACTIVE_ITEM)[0]); const r = P.Event(Q.SLIDE, {
        relatedTarget: t, direction: e, from: i, to: n,
      }); return P(this._element).trigger(r), r;
    }, t._setActiveIndicatorElement = function (t) { if (this._indicatorsElement) { P(this._indicatorsElement).find(Z.ACTIVE).removeClass(Y); const e = this._indicatorsElement.children[this._getItemIndex(t)]; e && P(e).addClass(Y); } }, t._slide = function (t, e) {
      let n; let i; let r; const s = this; const o = P(this._element).find(Z.ACTIVE_ITEM)[0]; const a = this._getItemIndex(o); const l = e || o && this._getItemByDirection(t, o); const h = this._getItemIndex(l); const c = Boolean(this._interval); if (t === U ? (n = z, i = X, r = F) : (n = q, i = J, r = V), l && P(l).hasClass(Y)) this._isSliding = !1; else if (!this._triggerSlideEvent(l, r).isDefaultPrevented() && o && l) {
        this._isSliding = !0, c && this.pause(), this._setActiveIndicatorElement(l); const u = P.Event(Q.SLID, {
          relatedTarget: l, direction: r, from: a, to: h,
        }); if (P(this._element).hasClass(G)) { P(l).addClass(i), Cn.reflow(l), P(o).addClass(n), P(l).addClass(n); const f = Cn.getTransitionDurationFromElement(o); P(o).one(Cn.TRANSITION_END, () => { P(l).removeClass(`${n} ${i}`).addClass(Y), P(o).removeClass(`${Y} ${i} ${n}`), s._isSliding = !1, setTimeout(() => P(s._element).trigger(u), 0); }).emulateTransitionEnd(f); } else P(o).removeClass(Y), P(l).addClass(Y), this._isSliding = !1, P(this._element).trigger(u); c && this.cycle();
      }
    }, s._jQueryInterface = function (i) { return this.each(function () { let t = P(this).data(j); let e = h({}, M, P(this).data()); typeof i === 'object' && (e = h({}, e, i)); const n = typeof i === 'string' ? i : e.slide; if (t || (t = new s(this, e), P(this).data(j, t)), typeof i === 'number')t.to(i); else if (typeof n === 'string') { if (typeof t[n] === 'undefined') throw new TypeError(`No method named "${n}"`); t[n](); } else e.interval && (t.pause(), t.cycle()); }); }, s._dataApiClickHandler = function (t) { const e = Cn.getSelectorFromElement(this); if (e) { const n = P(e)[0]; if (n && P(n).hasClass(B)) { const i = h({}, P(n).data(), P(this).data()); const r = this.getAttribute('data-slide-to'); r && (i.interval = !1), s._jQueryInterface.call(P(n), i), r && P(n).data(j).to(r), t.preventDefault(); } } }, o(s, null, [{ key: 'VERSION', get() { return '4.1.1'; } }, { key: 'Default', get() { return M; } }]), s;
  }()), P(document).on(Q.CLICK_DATA_API, Z.DATA_SLIDE, $._dataApiClickHandler), P(window).on(Q.LOAD_DATA_API, () => { P(Z.DATA_RIDE).each(function () { const t = P(this); $._jQueryInterface.call(t, t.data()); }); }), P.fn[L] = $._jQueryInterface, P.fn[L].Constructor = $, P.fn[L].noConflict = function () { return P.fn[L] = W, $._jQueryInterface; }, $); const bn = (et = 'collapse', it = `.${nt = 'bs.collapse'}`, rt = (tt = e).fn[et], st = { toggle: !0, parent: '' }, ot = { toggle: 'boolean', parent: '(string|element)' }, at = {
    SHOW: `show${it}`, SHOWN: `shown${it}`, HIDE: `hide${it}`, HIDDEN: `hidden${it}`, CLICK_DATA_API: `click${it}.data-api`,
  }, lt = 'show', ht = 'collapse', ct = 'collapsing', ut = 'collapsed', ft = 'width', dt = 'height', _t = { ACTIVES: '.show, .collapsing', DATA_TOGGLE: '[data-toggle="collapse"]' }, gt = (function () { function a(t, e) { this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = tt.makeArray(tt(`[data-toggle="collapse"][href="#${t.id}"],[data-toggle="collapse"][data-target="#${t.id}"]`)); for (let n = tt(_t.DATA_TOGGLE), i = 0; i < n.length; i++) { const r = n[i]; const s = Cn.getSelectorFromElement(r); s !== null && tt(s).filter(t).length > 0 && (this._selector = s, this._triggerArray.push(r)); } this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle(); } const t = a.prototype; return t.toggle = function () { tt(this._element).hasClass(lt) ? this.hide() : this.show(); }, t.show = function () { let t; let e; const n = this; if (!this._isTransitioning && !tt(this._element).hasClass(lt) && (this._parent && (t = tt.makeArray(tt(this._parent).find(_t.ACTIVES).filter(`[data-parent="${this._config.parent}"]`))).length === 0 && (t = null), !(t && (e = tt(t).not(this._selector).data(nt)) && e._isTransitioning))) { const i = tt.Event(at.SHOW); if (tt(this._element).trigger(i), !i.isDefaultPrevented()) { t && (a._jQueryInterface.call(tt(t).not(this._selector), 'hide'), e || tt(t).data(nt, null)); const r = this._getDimension(); tt(this._element).removeClass(ht).addClass(ct), (this._element.style[r] = 0) < this._triggerArray.length && tt(this._triggerArray).removeClass(ut).attr('aria-expanded', !0), this.setTransitioning(!0); const s = `scroll${r[0].toUpperCase() + r.slice(1)}`; const o = Cn.getTransitionDurationFromElement(this._element); tt(this._element).one(Cn.TRANSITION_END, () => { tt(n._element).removeClass(ct).addClass(ht).addClass(lt), n._element.style[r] = '', n.setTransitioning(!1), tt(n._element).trigger(at.SHOWN); }).emulateTransitionEnd(o), this._element.style[r] = `${this._element[s]}px`; } } }, t.hide = function () { const t = this; if (!this._isTransitioning && tt(this._element).hasClass(lt)) { const e = tt.Event(at.HIDE); if (tt(this._element).trigger(e), !e.isDefaultPrevented()) { const n = this._getDimension(); if (this._element.style[n] = `${this._element.getBoundingClientRect()[n]}px`, Cn.reflow(this._element), tt(this._element).addClass(ct).removeClass(ht).removeClass(lt), this._triggerArray.length > 0) for (let i = 0; i < this._triggerArray.length; i++) { const r = this._triggerArray[i]; const s = Cn.getSelectorFromElement(r); if (s !== null)tt(s).hasClass(lt) || tt(r).addClass(ut).attr('aria-expanded', !1); } this.setTransitioning(!0); this._element.style[n] = ''; const o = Cn.getTransitionDurationFromElement(this._element); tt(this._element).one(Cn.TRANSITION_END, () => { t.setTransitioning(!1), tt(t._element).removeClass(ct).addClass(ht).trigger(at.HIDDEN); }).emulateTransitionEnd(o); } } }, t.setTransitioning = function (t) { this._isTransitioning = t; }, t.dispose = function () { tt.removeData(this._element, nt), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null; }, t._getConfig = function (t) { return (t = h({}, st, t)).toggle = Boolean(t.toggle), Cn.typeCheckConfig(et, t, ot), t; }, t._getDimension = function () { return tt(this._element).hasClass(ft) ? ft : dt; }, t._getParent = function () { const n = this; let t = null; Cn.isElement(this._config.parent) ? (t = this._config.parent, typeof this._config.parent.jquery !== 'undefined' && (t = this._config.parent[0])) : t = tt(this._config.parent)[0]; const e = `[data-toggle="collapse"][data-parent="${this._config.parent}"]`; return tt(t).find(e).each((t, e) => { n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [e]); }), t; }, t._addAriaAndCollapsedClass = function (t, e) { if (t) { const n = tt(t).hasClass(lt); e.length > 0 && tt(e).toggleClass(ut, !n).attr('aria-expanded', n); } }, a._getTargetFromElement = function (t) { const e = Cn.getSelectorFromElement(t); return e ? tt(e)[0] : null; }, a._jQueryInterface = function (i) { return this.each(function () { const t = tt(this); let e = t.data(nt); const n = h({}, st, t.data(), typeof i === 'object' && i ? i : {}); if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), t.data(nt, e)), typeof i === 'string') { if (typeof e[i] === 'undefined') throw new TypeError(`No method named "${i}"`); e[i](); } }); }, o(a, null, [{ key: 'VERSION', get() { return '4.1.1'; } }, { key: 'Default', get() { return st; } }]), a; }()), tt(document).on(at.CLICK_DATA_API, _t.DATA_TOGGLE, function (t) { t.currentTarget.tagName === 'A' && t.preventDefault(); const n = tt(this); const e = Cn.getSelectorFromElement(this); tt(e).each(function () { const t = tt(this); const e = t.data(nt) ? 'toggle' : n.data(); gt._jQueryInterface.call(t, e); }); }), tt.fn[et] = gt._jQueryInterface, tt.fn[et].Constructor = gt, tt.fn[et].noConflict = function () { return tt.fn[et] = rt, gt._jQueryInterface; }, gt); const Sn = (pt = 'dropdown', Et = `.${vt = 'bs.dropdown'}`, yt = '.data-api', Tt = (mt = e).fn[pt], Ct = new RegExp('38|40|27'), It = {
    HIDE: `hide${Et}`, HIDDEN: `hidden${Et}`, SHOW: `show${Et}`, SHOWN: `shown${Et}`, CLICK: `click${Et}`, CLICK_DATA_API: `click${Et}${yt}`, KEYDOWN_DATA_API: `keydown${Et}${yt}`, KEYUP_DATA_API: `keyup${Et}${yt}`,
  }, At = 'disabled', Dt = 'show', bt = 'dropup', St = 'dropright', wt = 'dropleft', Nt = 'dropdown-menu-right', Ot = 'position-static', kt = '[data-toggle="dropdown"]', Pt = '.dropdown form', Lt = '.dropdown-menu', jt = '.navbar-nav', Rt = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)', Ht = 'top-start', Wt = 'top-end', Mt = 'bottom-start', xt = 'bottom-end', Ut = 'right-start', Kt = 'left-start', Ft = {
    offset: 0, flip: !0, boundary: 'scrollParent', reference: 'toggle', display: 'dynamic',
  }, Vt = {
    offset: '(number|string|function)', flip: 'boolean', boundary: '(string|element)', reference: '(string|element)', display: 'string',
  }, Qt = (function () { function l(t, e) { this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners(); } const t = l.prototype; return t.toggle = function () { if (!this._element.disabled && !mt(this._element).hasClass(At)) { const t = l._getParentFromElement(this._element); const e = mt(this._menu).hasClass(Dt); if (l._clearMenus(), !e) { const n = { relatedTarget: this._element }; const i = mt.Event(It.SHOW, n); if (mt(t).trigger(i), !i.isDefaultPrevented()) { if (!this._inNavbar) { if (typeof c === 'undefined') throw new TypeError('Bootstrap dropdown require Popper.js (https://popper.js.org)'); let r = this._element; this._config.reference === 'parent' ? r = t : Cn.isElement(this._config.reference) && (r = this._config.reference, typeof this._config.reference.jquery !== 'undefined' && (r = this._config.reference[0])), this._config.boundary !== 'scrollParent' && mt(t).addClass(Ot), this._popper = new c(r, this._menu, this._getPopperConfig()); }'ontouchstart' in document.documentElement && mt(t).closest(jt).length === 0 && mt(document.body).children().on('mouseover', null, mt.noop), this._element.focus(), this._element.setAttribute('aria-expanded', !0), mt(this._menu).toggleClass(Dt), mt(t).toggleClass(Dt).trigger(mt.Event(It.SHOWN, n)); } } } }, t.dispose = function () { mt.removeData(this._element, vt), mt(this._element).off(Et), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null); }, t.update = function () { this._inNavbar = this._detectNavbar(), this._popper !== null && this._popper.scheduleUpdate(); }, t._addEventListeners = function () { const e = this; mt(this._element).on(It.CLICK, (t) => { t.preventDefault(), t.stopPropagation(), e.toggle(); }); }, t._getConfig = function (t) { return t = h({}, this.constructor.Default, mt(this._element).data(), t), Cn.typeCheckConfig(pt, t, this.constructor.DefaultType), t; }, t._getMenuElement = function () { if (!this._menu) { const t = l._getParentFromElement(this._element); this._menu = mt(t).find(Lt)[0]; } return this._menu; }, t._getPlacement = function () { const t = mt(this._element).parent(); let e = Mt; return t.hasClass(bt) ? (e = Ht, mt(this._menu).hasClass(Nt) && (e = Wt)) : t.hasClass(St) ? e = Ut : t.hasClass(wt) ? e = Kt : mt(this._menu).hasClass(Nt) && (e = xt), e; }, t._detectNavbar = function () { return mt(this._element).closest('.navbar').length > 0; }, t._getPopperConfig = function () { const e = this; const t = {}; typeof this._config.offset === 'function' ? t.fn = function (t) { return t.offsets = h({}, t.offsets, e._config.offset(t.offsets) || {}), t; } : t.offset = this._config.offset; const n = { placement: this._getPlacement(), modifiers: { offset: t, flip: { enabled: this._config.flip }, preventOverflow: { boundariesElement: this._config.boundary } } }; return this._config.display === 'static' && (n.modifiers.applyStyle = { enabled: !1 }), n; }, l._jQueryInterface = function (e) { return this.each(function () { let t = mt(this).data(vt); if (t || (t = new l(this, typeof e === 'object' ? e : null), mt(this).data(vt, t)), typeof e === 'string') { if (typeof t[e] === 'undefined') throw new TypeError(`No method named "${e}"`); t[e](); } }); }, l._clearMenus = function (t) { if (!t || t.which !== 3 && (t.type !== 'keyup' || t.which === 9)) for (let e = mt.makeArray(mt(kt)), n = 0; n < e.length; n++) { const i = l._getParentFromElement(e[n]); const r = mt(e[n]).data(vt); const s = { relatedTarget: e[n] }; if (r) { const o = r._menu; if (mt(i).hasClass(Dt) && !(t && (t.type === 'click' && /input|textarea/i.test(t.target.tagName) || t.type === 'keyup' && t.which === 9) && mt.contains(i, t.target))) { const a = mt.Event(It.HIDE, s); mt(i).trigger(a), a.isDefaultPrevented() || ('ontouchstart' in document.documentElement && mt(document.body).children().off('mouseover', null, mt.noop), e[n].setAttribute('aria-expanded', 'false'), mt(o).removeClass(Dt), mt(i).removeClass(Dt).trigger(mt.Event(It.HIDDEN, s))); } } } }, l._getParentFromElement = function (t) { let e; const n = Cn.getSelectorFromElement(t); return n && (e = mt(n)[0]), e || t.parentNode; }, l._dataApiKeydownHandler = function (t) { if ((/input|textarea/i.test(t.target.tagName) ? !(t.which === 32 || t.which !== 27 && (t.which !== 40 && t.which !== 38 || mt(t.target).closest(Lt).length)) : Ct.test(t.which)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !mt(this).hasClass(At))) { const e = l._getParentFromElement(this); const n = mt(e).hasClass(Dt); if ((n || t.which === 27 && t.which === 32) && (!n || t.which !== 27 && t.which !== 32)) { const i = mt(e).find(Rt).get(); if (i.length !== 0) { let r = i.indexOf(t.target); t.which === 38 && r > 0 && r--, t.which === 40 && r < i.length - 1 && r++, r < 0 && (r = 0), i[r].focus(); } } else { if (t.which === 27) { const s = mt(e).find(kt)[0]; mt(s).trigger('focus'); }mt(this).trigger('click'); } } }, o(l, null, [{ key: 'VERSION', get() { return '4.1.1'; } }, { key: 'Default', get() { return Ft; } }, { key: 'DefaultType', get() { return Vt; } }]), l; }()), mt(document).on(It.KEYDOWN_DATA_API, kt, Qt._dataApiKeydownHandler).on(It.KEYDOWN_DATA_API, Lt, Qt._dataApiKeydownHandler).on(`${It.CLICK_DATA_API} ${It.KEYUP_DATA_API}`, Qt._clearMenus)
    .on(It.CLICK_DATA_API, kt, function (t) { t.preventDefault(), t.stopPropagation(), Qt._jQueryInterface.call(mt(this), 'toggle'); })
    .on(It.CLICK_DATA_API, Pt, (t) => { t.stopPropagation(); }), mt.fn[pt] = Qt._jQueryInterface, mt.fn[pt].Constructor = Qt, mt.fn[pt].noConflict = function () { return mt.fn[pt] = Tt, Qt._jQueryInterface; }, Qt); const wn = (Yt = 'modal', qt = `.${Gt = 'bs.modal'}`, zt = (Bt = e).fn[Yt], Xt = {
    backdrop: !0, keyboard: !0, focus: !0, show: !0,
  }, Jt = {
    backdrop: '(boolean|string)', keyboard: 'boolean', focus: 'boolean', show: 'boolean',
  }, Zt = {
    HIDE: `hide${qt}`, HIDDEN: `hidden${qt}`, SHOW: `show${qt}`, SHOWN: `shown${qt}`, FOCUSIN: `focusin${qt}`, RESIZE: `resize${qt}`, CLICK_DISMISS: `click.dismiss${qt}`, KEYDOWN_DISMISS: `keydown.dismiss${qt}`, MOUSEUP_DISMISS: `mouseup.dismiss${qt}`, MOUSEDOWN_DISMISS: `mousedown.dismiss${qt}`, CLICK_DATA_API: `click${qt}.data-api`,
  }, $t = 'modal-scrollbar-measure', te = 'modal-backdrop', ee = 'modal-open', ne = 'fade', ie = 'show', re = {
    DIALOG: '.modal-dialog', DATA_TOGGLE: '[data-toggle="modal"]', DATA_DISMISS: '[data-dismiss="modal"]', FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top', STICKY_CONTENT: '.sticky-top', NAVBAR_TOGGLER: '.navbar-toggler',
  }, se = (function () { function r(t, e) { this._config = this._getConfig(e), this._element = t, this._dialog = Bt(t).find(re.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._scrollbarWidth = 0; } const t = r.prototype; return t.toggle = function (t) { return this._isShown ? this.hide() : this.show(t); }, t.show = function (t) { const e = this; if (!this._isTransitioning && !this._isShown) { Bt(this._element).hasClass(ne) && (this._isTransitioning = !0); const n = Bt.Event(Zt.SHOW, { relatedTarget: t }); Bt(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), Bt(document.body).addClass(ee), this._setEscapeEvent(), this._setResizeEvent(), Bt(this._element).on(Zt.CLICK_DISMISS, re.DATA_DISMISS, (t) => e.hide(t)), Bt(this._dialog).on(Zt.MOUSEDOWN_DISMISS, () => { Bt(e._element).one(Zt.MOUSEUP_DISMISS, (t) => { Bt(t.target).is(e._element) && (e._ignoreBackdropClick = !0); }); }), this._showBackdrop(() => e._showElement(t))); } }, t.hide = function (t) { const e = this; if (t && t.preventDefault(), !this._isTransitioning && this._isShown) { const n = Bt.Event(Zt.HIDE); if (Bt(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) { this._isShown = !1; const i = Bt(this._element).hasClass(ne); if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), Bt(document).off(Zt.FOCUSIN), Bt(this._element).removeClass(ie), Bt(this._element).off(Zt.CLICK_DISMISS), Bt(this._dialog).off(Zt.MOUSEDOWN_DISMISS), i) { const r = Cn.getTransitionDurationFromElement(this._element); Bt(this._element).one(Cn.TRANSITION_END, (t) => e._hideModal(t)).emulateTransitionEnd(r); } else this._hideModal(); } } }, t.dispose = function () { Bt.removeData(this._element, Gt), Bt(window, document, this._element, this._backdrop).off(qt), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null; }, t.handleUpdate = function () { this._adjustDialog(); }, t._getConfig = function (t) { return t = h({}, Xt, t), Cn.typeCheckConfig(Yt, t, Jt), t; }, t._showElement = function (t) { const e = this; const n = Bt(this._element).hasClass(ne); this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = 'block', this._element.removeAttribute('aria-hidden'), this._element.scrollTop = 0, n && Cn.reflow(this._element), Bt(this._element).addClass(ie), this._config.focus && this._enforceFocus(); const i = Bt.Event(Zt.SHOWN, { relatedTarget: t }); const r = function () { e._config.focus && e._element.focus(), e._isTransitioning = !1, Bt(e._element).trigger(i); }; if (n) { const s = Cn.getTransitionDurationFromElement(this._element); Bt(this._dialog).one(Cn.TRANSITION_END, r).emulateTransitionEnd(s); } else r(); }, t._enforceFocus = function () { const e = this; Bt(document).off(Zt.FOCUSIN).on(Zt.FOCUSIN, (t) => { document !== t.target && e._element !== t.target && Bt(e._element).has(t.target).length === 0 && e._element.focus(); }); }, t._setEscapeEvent = function () { const e = this; this._isShown && this._config.keyboard ? Bt(this._element).on(Zt.KEYDOWN_DISMISS, (t) => { t.which === 27 && (t.preventDefault(), e.hide()); }) : this._isShown || Bt(this._element).off(Zt.KEYDOWN_DISMISS); }, t._setResizeEvent = function () { const e = this; this._isShown ? Bt(window).on(Zt.RESIZE, (t) => e.handleUpdate(t)) : Bt(window).off(Zt.RESIZE); }, t._hideModal = function () { const t = this; this._element.style.display = 'none', this._element.setAttribute('aria-hidden', !0), this._isTransitioning = !1, this._showBackdrop(() => { Bt(document.body).removeClass(ee), t._resetAdjustments(), t._resetScrollbar(), Bt(t._element).trigger(Zt.HIDDEN); }); }, t._removeBackdrop = function () { this._backdrop && (Bt(this._backdrop).remove(), this._backdrop = null); }, t._showBackdrop = function (t) { const e = this; const n = Bt(this._element).hasClass(ne) ? ne : ''; if (this._isShown && this._config.backdrop) { if (this._backdrop = document.createElement('div'), this._backdrop.className = te, n && Bt(this._backdrop).addClass(n), Bt(this._backdrop).appendTo(document.body), Bt(this._element).on(Zt.CLICK_DISMISS, (t) => { e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && (e._config.backdrop === 'static' ? e._element.focus() : e.hide()); }), n && Cn.reflow(this._backdrop), Bt(this._backdrop).addClass(ie), !t) return; if (!n) return void t(); const i = Cn.getTransitionDurationFromElement(this._backdrop); Bt(this._backdrop).one(Cn.TRANSITION_END, t).emulateTransitionEnd(i); } else if (!this._isShown && this._backdrop) { Bt(this._backdrop).removeClass(ie); const r = function () { e._removeBackdrop(), t && t(); }; if (Bt(this._element).hasClass(ne)) { const s = Cn.getTransitionDurationFromElement(this._backdrop); Bt(this._backdrop).one(Cn.TRANSITION_END, r).emulateTransitionEnd(s); } else r(); } else t && t(); }, t._adjustDialog = function () { const t = this._element.scrollHeight > document.documentElement.clientHeight; !this._isBodyOverflowing && t && (this._element.style.paddingLeft = `${this._scrollbarWidth}px`), this._isBodyOverflowing && !t && (this._element.style.paddingRight = `${this._scrollbarWidth}px`); }, t._resetAdjustments = function () { this._element.style.paddingLeft = '', this._element.style.paddingRight = ''; }, t._checkScrollbar = function () { const t = document.body.getBoundingClientRect(); this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth(); }, t._setScrollbar = function () { const r = this; if (this._isBodyOverflowing) { Bt(re.FIXED_CONTENT).each((t, e) => { const n = Bt(e)[0].style.paddingRight; const i = Bt(e).css('padding-right'); Bt(e).data('padding-right', n).css('padding-right', `${parseFloat(i) + r._scrollbarWidth}px`); }), Bt(re.STICKY_CONTENT).each((t, e) => { const n = Bt(e)[0].style.marginRight; const i = Bt(e).css('margin-right'); Bt(e).data('margin-right', n).css('margin-right', `${parseFloat(i) - r._scrollbarWidth}px`); }), Bt(re.NAVBAR_TOGGLER).each((t, e) => { const n = Bt(e)[0].style.marginRight; const i = Bt(e).css('margin-right'); Bt(e).data('margin-right', n).css('margin-right', `${parseFloat(i) + r._scrollbarWidth}px`); }); const t = document.body.style.paddingRight; const e = Bt(document.body).css('padding-right'); Bt(document.body).data('padding-right', t).css('padding-right', `${parseFloat(e) + this._scrollbarWidth}px`); } }, t._resetScrollbar = function () { Bt(re.FIXED_CONTENT).each((t, e) => { const n = Bt(e).data('padding-right'); typeof n !== 'undefined' && Bt(e).css('padding-right', n).removeData('padding-right'); }), Bt(`${re.STICKY_CONTENT}, ${re.NAVBAR_TOGGLER}`).each((t, e) => { const n = Bt(e).data('margin-right'); typeof n !== 'undefined' && Bt(e).css('margin-right', n).removeData('margin-right'); }); const t = Bt(document.body).data('padding-right'); typeof t !== 'undefined' && Bt(document.body).css('padding-right', t).removeData('padding-right'); }, t._getScrollbarWidth = function () { const t = document.createElement('div'); t.className = $t, document.body.appendChild(t); const e = t.getBoundingClientRect().width - t.clientWidth; return document.body.removeChild(t), e; }, r._jQueryInterface = function (n, i) { return this.each(function () { let t = Bt(this).data(Gt); const e = h({}, Xt, Bt(this).data(), typeof n === 'object' && n ? n : {}); if (t || (t = new r(this, e), Bt(this).data(Gt, t)), typeof n === 'string') { if (typeof t[n] === 'undefined') throw new TypeError(`No method named "${n}"`); t[n](i); } else e.show && t.show(i); }); }, o(r, null, [{ key: 'VERSION', get() { return '4.1.1'; } }, { key: 'Default', get() { return Xt; } }]), r; }()), Bt(document).on(Zt.CLICK_DATA_API, re.DATA_TOGGLE, function (t) { let e; const n = this; const i = Cn.getSelectorFromElement(this); i && (e = Bt(i)[0]); const r = Bt(e).data(Gt) ? 'toggle' : h({}, Bt(e).data(), Bt(this).data()); this.tagName !== 'A' && this.tagName !== 'AREA' || t.preventDefault(); var s = Bt(e).one(Zt.SHOW, (t) => { t.isDefaultPrevented() || s.one(Zt.HIDDEN, () => { Bt(n).is(':visible') && n.focus(); }); }); se._jQueryInterface.call(Bt(e), r, this); }), Bt.fn[Yt] = se._jQueryInterface, Bt.fn[Yt].Constructor = se, Bt.fn[Yt].noConflict = function () { return Bt.fn[Yt] = zt, se._jQueryInterface; }, se); const Nn = (ae = 'tooltip', he = `.${le = 'bs.tooltip'}`, ce = (oe = e).fn[ae], ue = 'bs-tooltip', fe = new RegExp(`(^|\\s)${ue}\\S+`, 'g'), ge = {
    animation: !0,
    template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: !(_e = {
      AUTO: 'auto', TOP: 'top', RIGHT: 'right', BOTTOM: 'bottom', LEFT: 'left',
    }),
    selector: !(de = {
      animation: 'boolean', template: 'string', title: '(string|element|function)', trigger: 'string', delay: '(number|object)', html: 'boolean', selector: '(string|boolean)', placement: '(string|function)', offset: '(number|string)', container: '(string|element|boolean)', fallbackPlacement: '(string|array)', boundary: '(string|element)',
    }),
    placement: 'top',
    offset: 0,
    container: !1,
    fallbackPlacement: 'flip',
    boundary: 'scrollParent',
  }, pe = 'out', ve = {
    HIDE: `hide${he}`, HIDDEN: `hidden${he}`, SHOW: (me = 'show') + he, SHOWN: `shown${he}`, INSERTED: `inserted${he}`, CLICK: `click${he}`, FOCUSIN: `focusin${he}`, FOCUSOUT: `focusout${he}`, MOUSEENTER: `mouseenter${he}`, MOUSELEAVE: `mouseleave${he}`,
  }, Ee = 'fade', ye = 'show', Te = '.tooltip-inner', Ce = '.arrow', Ie = 'hover', Ae = 'focus', De = 'click', be = 'manual', Se = (function () {
    function i(t, e) { if (typeof c === 'undefined') throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)'); this._isEnabled = !0, this._timeout = 0, this._hoverState = '', this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners(); } const t = i.prototype; return t.enable = function () { this._isEnabled = !0; }, t.disable = function () { this._isEnabled = !1; }, t.toggleEnabled = function () { this._isEnabled = !this._isEnabled; }, t.toggle = function (t) { if (this._isEnabled) if (t) { const e = this.constructor.DATA_KEY; let n = oe(t.currentTarget).data(e); n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), oe(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n); } else { if (oe(this.getTipElement()).hasClass(ye)) return void this._leave(null, this); this._enter(null, this); } }, t.dispose = function () { clearTimeout(this._timeout), oe.removeData(this.element, this.constructor.DATA_KEY), oe(this.element).off(this.constructor.EVENT_KEY), oe(this.element).closest('.modal').off('hide.bs.modal'), this.tip && oe(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null; }, t.show = function () {
      const e = this; if (oe(this.element).css('display') === 'none') throw new Error('Please use show on visible elements'); const t = oe.Event(this.constructor.Event.SHOW); if (this.isWithContent() && this._isEnabled) {
        oe(this.element).trigger(t); const n = oe.contains(this.element.ownerDocument.documentElement, this.element); if (t.isDefaultPrevented() || !n) return; const i = this.getTipElement(); const r = Cn.getUID(this.constructor.NAME); i.setAttribute('id', r), this.element.setAttribute('aria-describedby', r), this.setContent(), this.config.animation && oe(i).addClass(Ee); const s = typeof this.config.placement === 'function' ? this.config.placement.call(this, i, this.element) : this.config.placement; const o = this._getAttachment(s); this.addAttachmentClass(o); const a = !1 === this.config.container ? document.body : oe(this.config.container); oe(i).data(this.constructor.DATA_KEY, this), oe.contains(this.element.ownerDocument.documentElement, this.tip) || oe(i).appendTo(a), oe(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new c(this.element, i, {
          placement: o,
          modifiers: {
            offset: { offset: this.config.offset }, flip: { behavior: this.config.fallbackPlacement }, arrow: { element: Ce }, preventOverflow: { boundariesElement: this.config.boundary },
          },
          onCreate(t) { t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t); },
          onUpdate(t) { e._handlePopperPlacementChange(t); },
        }), oe(i).addClass(ye), 'ontouchstart' in document.documentElement && oe(document.body).children().on('mouseover', null, oe.noop); const l = function () { e.config.animation && e._fixTransition(); const t = e._hoverState; e._hoverState = null, oe(e.element).trigger(e.constructor.Event.SHOWN), t === pe && e._leave(null, e); }; if (oe(this.tip).hasClass(Ee)) { const h = Cn.getTransitionDurationFromElement(this.tip); oe(this.tip).one(Cn.TRANSITION_END, l).emulateTransitionEnd(h); } else l();
      }
    }, t.hide = function (t) { const e = this; const n = this.getTipElement(); const i = oe.Event(this.constructor.Event.HIDE); const r = function () { e._hoverState !== me && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute('aria-describedby'), oe(e.element).trigger(e.constructor.Event.HIDDEN), e._popper !== null && e._popper.destroy(), t && t(); }; if (oe(this.element).trigger(i), !i.isDefaultPrevented()) { if (oe(n).removeClass(ye), 'ontouchstart' in document.documentElement && oe(document.body).children().off('mouseover', null, oe.noop), this._activeTrigger[De] = !1, this._activeTrigger[Ae] = !1, this._activeTrigger[Ie] = !1, oe(this.tip).hasClass(Ee)) { const s = Cn.getTransitionDurationFromElement(n); oe(n).one(Cn.TRANSITION_END, r).emulateTransitionEnd(s); } else r(); this._hoverState = ''; } }, t.update = function () { this._popper !== null && this._popper.scheduleUpdate(); }, t.isWithContent = function () { return Boolean(this.getTitle()); }, t.addAttachmentClass = function (t) { oe(this.getTipElement()).addClass(`${ue}-${t}`); }, t.getTipElement = function () { return this.tip = this.tip || oe(this.config.template)[0], this.tip; }, t.setContent = function () { const t = oe(this.getTipElement()); this.setElementContent(t.find(Te), this.getTitle()), t.removeClass(`${Ee} ${ye}`); }, t.setElementContent = function (t, e) { const n = this.config.html; typeof e === 'object' && (e.nodeType || e.jquery) ? n ? oe(e).parent().is(t) || t.empty().append(e) : t.text(oe(e).text()) : t[n ? 'html' : 'text'](e); }, t.getTitle = function () { let t = this.element.getAttribute('data-original-title'); return t || (t = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title), t; }, t._getAttachment = function (t) { return _e[t.toUpperCase()]; }, t._setListeners = function () { const i = this; this.config.trigger.split(' ').forEach((t) => { if (t === 'click')oe(i.element).on(i.constructor.Event.CLICK, i.config.selector, (t) => i.toggle(t)); else if (t !== be) { const e = t === Ie ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN; const n = t === Ie ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT; oe(i.element).on(e, i.config.selector, (t) => i._enter(t)).on(n, i.config.selector, (t) => i._leave(t)); }oe(i.element).closest('.modal').on('hide.bs.modal', () => i.hide()); }), this.config.selector ? this.config = h({}, this.config, { trigger: 'manual', selector: '' }) : this._fixTitle(); }, t._fixTitle = function () { const t = typeof this.element.getAttribute('data-original-title'); (this.element.getAttribute('title') || t !== 'string') && (this.element.setAttribute('data-original-title', this.element.getAttribute('title') || ''), this.element.setAttribute('title', '')); }, t._enter = function (t, e) { const n = this.constructor.DATA_KEY; (e = e || oe(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), oe(t.currentTarget).data(n, e)), t && (e._activeTrigger[t.type === 'focusin' ? Ae : Ie] = !0), oe(e.getTipElement()).hasClass(ye) || e._hoverState === me ? e._hoverState = me : (clearTimeout(e._timeout), e._hoverState = me, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(() => { e._hoverState === me && e.show(); }, e.config.delay.show) : e.show()); }, t._leave = function (t, e) { const n = this.constructor.DATA_KEY; (e = e || oe(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), oe(t.currentTarget).data(n, e)), t && (e._activeTrigger[t.type === 'focusout' ? Ae : Ie] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = pe, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(() => { e._hoverState === pe && e.hide(); }, e.config.delay.hide) : e.hide()); }, t._isWithActiveTrigger = function () { for (const t in this._activeTrigger) if (this._activeTrigger[t]) return !0; return !1; }, t._getConfig = function (t) { return typeof (t = h({}, this.constructor.Default, oe(this.element).data(), typeof t === 'object' && t ? t : {})).delay === 'number' && (t.delay = { show: t.delay, hide: t.delay }), typeof t.title === 'number' && (t.title = t.title.toString()), typeof t.content === 'number' && (t.content = t.content.toString()), Cn.typeCheckConfig(ae, t, this.constructor.DefaultType), t; }, t._getDelegateConfig = function () { const t = {}; if (this.config) for (const e in this.config) this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]); return t; }, t._cleanTipClass = function () { const t = oe(this.getTipElement()); const e = t.attr('class').match(fe); e !== null && e.length > 0 && t.removeClass(e.join('')); }, t._handlePopperPlacementChange = function (t) { this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement)); }, t._fixTransition = function () { const t = this.getTipElement(); const e = this.config.animation; t.getAttribute('x-placement') === null && (oe(t).removeClass(Ee), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e); }, i._jQueryInterface = function (n) { return this.each(function () { let t = oe(this).data(le); const e = typeof n === 'object' && n; if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), oe(this).data(le, t)), typeof n === 'string')) { if (typeof t[n] === 'undefined') throw new TypeError(`No method named "${n}"`); t[n](); } }); }, o(i, null, [{ key: 'VERSION', get() { return '4.1.1'; } }, { key: 'Default', get() { return ge; } }, { key: 'NAME', get() { return ae; } }, { key: 'DATA_KEY', get() { return le; } }, { key: 'Event', get() { return ve; } }, { key: 'EVENT_KEY', get() { return he; } }, { key: 'DefaultType', get() { return de; } }]), i;
  }()), oe.fn[ae] = Se._jQueryInterface, oe.fn[ae].Constructor = Se, oe.fn[ae].noConflict = function () { return oe.fn[ae] = ce, Se._jQueryInterface; }, Se); const On = (Ne = 'popover', ke = `.${Oe = 'bs.popover'}`, Pe = (we = e).fn[Ne], Le = 'bs-popover', je = new RegExp(`(^|\\s)${Le}\\S+`, 'g'), Re = h({}, Nn.Default, {
    placement: 'right', trigger: 'click', content: '', template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
  }), He = h({}, Nn.DefaultType, { content: '(string|element|function)' }), We = 'fade', xe = '.popover-header', Ue = '.popover-body', Ke = {
    HIDE: `hide${ke}`, HIDDEN: `hidden${ke}`, SHOW: (Me = 'show') + ke, SHOWN: `shown${ke}`, INSERTED: `inserted${ke}`, CLICK: `click${ke}`, FOCUSIN: `focusin${ke}`, FOCUSOUT: `focusout${ke}`, MOUSEENTER: `mouseenter${ke}`, MOUSELEAVE: `mouseleave${ke}`,
  }, Fe = (function (t) { let e; let n; function i() { return t.apply(this, arguments) || this; }n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n; const r = i.prototype; return r.isWithContent = function () { return this.getTitle() || this._getContent(); }, r.addAttachmentClass = function (t) { we(this.getTipElement()).addClass(`${Le}-${t}`); }, r.getTipElement = function () { return this.tip = this.tip || we(this.config.template)[0], this.tip; }, r.setContent = function () { const t = we(this.getTipElement()); this.setElementContent(t.find(xe), this.getTitle()); let e = this._getContent(); typeof e === 'function' && (e = e.call(this.element)), this.setElementContent(t.find(Ue), e), t.removeClass(`${We} ${Me}`); }, r._getContent = function () { return this.element.getAttribute('data-content') || this.config.content; }, r._cleanTipClass = function () { const t = we(this.getTipElement()); const e = t.attr('class').match(je); e !== null && e.length > 0 && t.removeClass(e.join('')); }, i._jQueryInterface = function (n) { return this.each(function () { let t = we(this).data(Oe); const e = typeof n === 'object' ? n : null; if ((t || !/destroy|hide/.test(n)) && (t || (t = new i(this, e), we(this).data(Oe, t)), typeof n === 'string')) { if (typeof t[n] === 'undefined') throw new TypeError(`No method named "${n}"`); t[n](); } }); }, o(i, null, [{ key: 'VERSION', get() { return '4.1.1'; } }, { key: 'Default', get() { return Re; } }, { key: 'NAME', get() { return Ne; } }, { key: 'DATA_KEY', get() { return Oe; } }, { key: 'Event', get() { return Ke; } }, { key: 'EVENT_KEY', get() { return ke; } }, { key: 'DefaultType', get() { return He; } }]), i; }(Nn)), we.fn[Ne] = Fe._jQueryInterface, we.fn[Ne].Constructor = Fe, we.fn[Ne].noConflict = function () { return we.fn[Ne] = Pe, Fe._jQueryInterface; }, Fe); const kn = (Qe = 'scrollspy', Ye = `.${Be = 'bs.scrollspy'}`, Ge = (Ve = e).fn[Qe], qe = { offset: 10, method: 'auto', target: '' }, ze = { offset: 'number', method: 'string', target: '(string|element)' }, Xe = { ACTIVATE: `activate${Ye}`, SCROLL: `scroll${Ye}`, LOAD_DATA_API: `load${Ye}.data-api` }, Je = 'dropdown-item', Ze = 'active', $e = {
    DATA_SPY: '[data-spy="scroll"]', ACTIVE: '.active', NAV_LIST_GROUP: '.nav, .list-group', NAV_LINKS: '.nav-link', NAV_ITEMS: '.nav-item', LIST_ITEMS: '.list-group-item', DROPDOWN: '.dropdown', DROPDOWN_ITEMS: '.dropdown-item', DROPDOWN_TOGGLE: '.dropdown-toggle',
  }, tn = 'offset', en = 'position', nn = (function () {
    function n(t, e) { const n = this; this._element = t, this._scrollElement = t.tagName === 'BODY' ? window : t, this._config = this._getConfig(e), this._selector = `${this._config.target} ${$e.NAV_LINKS},${this._config.target} ${$e.LIST_ITEMS},${this._config.target} ${$e.DROPDOWN_ITEMS}`, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, Ve(this._scrollElement).on(Xe.SCROLL, (t) => n._process(t)), this.refresh(), this._process(); } const t = n.prototype; return t.refresh = function () {
      const e = this; const t = this._scrollElement === this._scrollElement.window ? tn : en; const r = this._config.method === 'auto' ? t : this._config.method; const s = r === en ? this._getScrollTop() : 0; this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), Ve.makeArray(Ve(this._selector)).map((t) => { let e; const n = Cn.getSelectorFromElement(t); if (n && (e = Ve(n)[0]), e) { const i = e.getBoundingClientRect(); if (i.width || i.height) return [Ve(e)[r]().top + s, n]; } return null; }).filter((t) => t).sort((t, e) => t[0] - e[0])
        .forEach((t) => { e._offsets.push(t[0]), e._targets.push(t[1]); });
    }, t.dispose = function () { Ve.removeData(this._element, Be), Ve(this._scrollElement).off(Ye), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null; }, t._getConfig = function (t) { if (typeof (t = h({}, qe, typeof t === 'object' && t ? t : {})).target !== 'string') { let e = Ve(t.target).attr('id'); e || (e = Cn.getUID(Qe), Ve(t.target).attr('id', e)), t.target = `#${e}`; } return Cn.typeCheckConfig(Qe, t, ze), t; }, t._getScrollTop = function () { return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop; }, t._getScrollHeight = function () { return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight); }, t._getOffsetHeight = function () { return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height; }, t._process = function () { const t = this._getScrollTop() + this._config.offset; const e = this._getScrollHeight(); const n = this._config.offset + e - this._getOffsetHeight(); if (this._scrollHeight !== e && this.refresh(), n <= t) { const i = this._targets[this._targets.length - 1]; this._activeTarget !== i && this._activate(i); } else { if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear(); for (let r = this._offsets.length; r--;) { this._activeTarget !== this._targets[r] && t >= this._offsets[r] && (typeof this._offsets[r + 1] === 'undefined' || t < this._offsets[r + 1]) && this._activate(this._targets[r]); } } }, t._activate = function (e) { this._activeTarget = e, this._clear(); let t = this._selector.split(','); t = t.map((t) => `${t}[data-target="${e}"],${t}[href="${e}"]`); const n = Ve(t.join(',')); n.hasClass(Je) ? (n.closest($e.DROPDOWN).find($e.DROPDOWN_TOGGLE).addClass(Ze), n.addClass(Ze)) : (n.addClass(Ze), n.parents($e.NAV_LIST_GROUP).prev(`${$e.NAV_LINKS}, ${$e.LIST_ITEMS}`).addClass(Ze), n.parents($e.NAV_LIST_GROUP).prev($e.NAV_ITEMS).children($e.NAV_LINKS).addClass(Ze)), Ve(this._scrollElement).trigger(Xe.ACTIVATE, { relatedTarget: e }); }, t._clear = function () { Ve(this._selector).filter($e.ACTIVE).removeClass(Ze); }, n._jQueryInterface = function (e) { return this.each(function () { let t = Ve(this).data(Be); if (t || (t = new n(this, typeof e === 'object' && e), Ve(this).data(Be, t)), typeof e === 'string') { if (typeof t[e] === 'undefined') throw new TypeError(`No method named "${e}"`); t[e](); } }); }, o(n, null, [{ key: 'VERSION', get() { return '4.1.1'; } }, { key: 'Default', get() { return qe; } }]), n;
  }()), Ve(window).on(Xe.LOAD_DATA_API, () => { for (let t = Ve.makeArray(Ve($e.DATA_SPY)), e = t.length; e--;) { const n = Ve(t[e]); nn._jQueryInterface.call(n, n.data()); } }), Ve.fn[Qe] = nn._jQueryInterface, Ve.fn[Qe].Constructor = nn, Ve.fn[Qe].noConflict = function () { return Ve.fn[Qe] = Ge, nn._jQueryInterface; }, nn); const Pn = (on = `.${sn = 'bs.tab'}`, an = (rn = e).fn.tab, ln = {
    HIDE: `hide${on}`, HIDDEN: `hidden${on}`, SHOW: `show${on}`, SHOWN: `shown${on}`, CLICK_DATA_API: `click${on}.data-api`,
  }, hn = 'dropdown-menu', cn = 'active', un = 'disabled', fn = 'fade', dn = 'show', _n = '.dropdown', gn = '.nav, .list-group', mn = '.active', pn = '> li > .active', vn = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', En = '.dropdown-toggle', yn = '> .dropdown-menu .active', Tn = (function () { function i(t) { this._element = t; } const t = i.prototype; return t.show = function () { const n = this; if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && rn(this._element).hasClass(cn) || rn(this._element).hasClass(un))) { let t; let i; const e = rn(this._element).closest(gn)[0]; const r = Cn.getSelectorFromElement(this._element); if (e) { const s = e.nodeName === 'UL' ? pn : mn; i = (i = rn.makeArray(rn(e).find(s)))[i.length - 1]; } const o = rn.Event(ln.HIDE, { relatedTarget: this._element }); const a = rn.Event(ln.SHOW, { relatedTarget: i }); if (i && rn(i).trigger(o), rn(this._element).trigger(a), !a.isDefaultPrevented() && !o.isDefaultPrevented()) { r && (t = rn(r)[0]), this._activate(this._element, e); const l = function () { const t = rn.Event(ln.HIDDEN, { relatedTarget: n._element }); const e = rn.Event(ln.SHOWN, { relatedTarget: i }); rn(i).trigger(t), rn(n._element).trigger(e); }; t ? this._activate(t, t.parentNode, l) : l(); } } }, t.dispose = function () { rn.removeData(this._element, sn), this._element = null; }, t._activate = function (t, e, n) { const i = this; const r = (e.nodeName === 'UL' ? rn(e).find(pn) : rn(e).children(mn))[0]; const s = n && r && rn(r).hasClass(fn); const o = function () { return i._transitionComplete(t, r, n); }; if (r && s) { const a = Cn.getTransitionDurationFromElement(r); rn(r).one(Cn.TRANSITION_END, o).emulateTransitionEnd(a); } else o(); }, t._transitionComplete = function (t, e, n) { if (e) { rn(e).removeClass(`${dn} ${cn}`); const i = rn(e.parentNode).find(yn)[0]; i && rn(i).removeClass(cn), e.getAttribute('role') === 'tab' && e.setAttribute('aria-selected', !1); } if (rn(t).addClass(cn), t.getAttribute('role') === 'tab' && t.setAttribute('aria-selected', !0), Cn.reflow(t), rn(t).addClass(dn), t.parentNode && rn(t.parentNode).hasClass(hn)) { const r = rn(t).closest(_n)[0]; r && rn(r).find(En).addClass(cn), t.setAttribute('aria-expanded', !0); }n && n(); }, i._jQueryInterface = function (n) { return this.each(function () { const t = rn(this); let e = t.data(sn); if (e || (e = new i(this), t.data(sn, e)), typeof n === 'string') { if (typeof e[n] === 'undefined') throw new TypeError(`No method named "${n}"`); e[n](); } }); }, o(i, null, [{ key: 'VERSION', get() { return '4.1.1'; } }]), i; }()), rn(document).on(ln.CLICK_DATA_API, vn, function (t) { t.preventDefault(), Tn._jQueryInterface.call(rn(this), 'show'); }), rn.fn.tab = Tn._jQueryInterface, rn.fn.tab.Constructor = Tn, rn.fn.tab.noConflict = function () { return rn.fn.tab = an, Tn._jQueryInterface; }, Tn); !(function (t) { if (typeof t === 'undefined') throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript."); const e = t.fn.jquery.split(' ')[0].split('.'); if (e[0] < 2 && e[1] < 9 || e[0] === 1 && e[1] === 9 && e[2] < 1 || e[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0"); }(e)), t.Util = Cn, t.Alert = In, t.Button = An, t.Carousel = Dn, t.Collapse = bn, t.Dropdown = Sn, t.Modal = wn, t.Popover = On, t.Scrollspy = kn, t.Tab = Pn, t.Tooltip = Nn, Object.defineProperty(t, '__esModule', { value: !0 });
}));
// # sourceMappingURL=bootstrap.min.js.map
